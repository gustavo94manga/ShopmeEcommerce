package com.shopme.admin.user;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.annotation.Rollback;

import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

@DataJpaTest
@AutoConfigureTestDatabase(replace = Replace.NONE)
@Rollback(false)
public class UserRepositoryTests {
	
	@Autowired
	private UserRepository repo;
	
	@Autowired
	private TestEntityManager em;
	
	@Test
	public void testCreateNewUserWithOneRole() {
		Role roleAdmin = em.find(Role.class, 1);
		User userAngel = new User("angel@java.com", "angel", "Angel", "Garza");
		userAngel.addRole(roleAdmin);
		
		User savedUser = repo.save(userAngel);
		assertThat(savedUser.getId()).isGreaterThan(0);
	}
	
	@Test
	public void testCreateNewUserWithTwoRoles() {
		User userShoko = new User("shoko@java.com", "shoko", "Shoko", "Garza");
		int editorId = 3;
		int assistantId = 5;
		Role roleEditor = new Role(editorId);
		Role roleAssistant = new Role(assistantId);
		userShoko.addRole(roleEditor);
		userShoko.addRole(roleAssistant);
		
		User savedUser = repo.save(userShoko);
		assertThat(savedUser.getId()).isGreaterThan(0);
	}
	
	@Test
	public void testListAllUsers() {
		Iterable<User> listUsers = repo.findAll();
		listUsers.forEach(user -> System.out.println(user));
	}
	
	@Test
	public void testGetUserById() {
		User userAngel = repo.findById(1).get();
		System.out.println(userAngel);
		assertThat(userAngel).isNotNull();
	}
	
	@Test
	public void testUpdateUserDetails() {
		User userAngel = repo.findById(1).get();
		userAngel.setEnabled(true);
		userAngel.setEmail("angel@java.com");
		
		repo.save(userAngel);
	}
	
	@Test
	public void testUpdateUserRoles() {
		User userShoko = repo.findById(2).get();
		int editorId = 3;
		int salesPersonId = 2;
		Role roleEditor = new Role(editorId);
		Role roleSalesPerson = new Role(salesPersonId);
		
		userShoko.getRoles().remove(roleEditor);
		userShoko.addRole(roleSalesPerson);
		
		repo.save(userShoko);
	}
	
	@Test
	public void testDeleteUser() {
		Integer userId = 2;
		repo.deleteById(userId);
	}
	
	@Test
	public void testGetUserByEmail() {
		String email = "shoko@java.com";
		User user = repo.getUserByEmail(email);
		
		assertThat(user).isNotNull();
	}
	
	@Test
	public void testCountById() {
		Integer id = 100;
		Long countById = repo.countById(id);
		
		assertThat(countById).isNotNull().isGreaterThan(0);
	}

}
